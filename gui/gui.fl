# data file for the Fltk User Interface Designer (fluid)
version 1.0107 
do_not_include_H_from_C 
header_name {.hpp} 
code_name {.cpp}
decl {\#include "gui.hpp"} {selected
} 

decl {\#include <FL/Fl_File_Chooser.H>} {} 

class EmulatorWindowGroup {open : {public Fl_Group}
} {
  decl {void *gui_;} {}
  Function {EmulatorWindowGroup(int xx, int yy, int ww, int hh, const char *lbl_ = (char *) 0) : Fl_Group(xx, yy, ww, hh, lbl_)} {open
  } {
    code {{
  gui_ = (void *) 0;
}} {}
  }
  Function {~EmulatorWindowGroup()} {open return_type virtual
  } {}
  Function {handle(int event)} {open return_type {virtual int}
  } {
    code {{
  if (gui_)
    return ((Ep128EmuGUI *) gui_)->handleFLTKEvent(event);
  return 0;
}} {}
  }
  Function {setGUI(void *gui__)} {open return_type void
  } {
    code {{
  gui_ = gui__;
}} {}
  }
} 

class Ep128EmuGUI {open
} {
  decl {Ep128Emu::VideoDisplay& display;} {}
  decl {Ep128Emu::AudioOutput& audioOutput;} {}
  decl {Ep128Emu::VirtualMachine& vm;} {}
  decl {Ep128Emu::VMThread& vmThread;} {}
  decl {Ep128Emu::EmulatorConfiguration& config;} {}
  decl {Ep128Emu::FLTKDisplay *flDisplay;} {}
  decl {Ep128Emu::OpenGLDisplay *glDisplay;} {}
  decl {Fl_Window *emulatorWindow;} {}
  decl {uintptr_t mainThreadID;} {}
  decl {int displayMode;} {}
  decl {bool exitFlag;} {}
  decl {bool errorFlag;} {}
  decl {int oldWindowWidth;} {}
  decl {int oldWindowHeight;} {}
  decl {int oldDisplayMode;} {}
  decl {int oldDemoStatus;} {}
  decl {bool oldPauseFlag;} {}
  decl {long oldTapeSampleRate;} {}
  decl {int oldTapeSampleSize;} {}
  decl {bool oldTapeReadOnlyFlag;} {}
  decl {long oldTapePosition;} {}
  decl {bool functionKeyState[12];} {}
  decl {int tapeButtonState;} {}
  decl {int oldTapeButtonState;} {}
  decl {std::string demoRecordFileName;} {}
  decl {Ep128Emu::File *demoRecordFile;} {}
  decl {std::string quickSnapshotFileName;} {}
  decl {bool updateDisplayEntered;} {}
  decl {bool singleThreadedMode;} {}
  decl {bool browseFileWindowShowFlag;} {}
  decl {Fl_File_Chooser *browseFileWindow;} {}
  decl {Fl_Window *windowToShow;} {}
  decl {std::string snapshotDirectory;} {}
  decl {std::string demoDirectory;} {}
  decl {std::string soundFileDirectory;} {}
  decl {std::string configDirectory;} {}
  decl {std::string loadFileDirectory;} {}
  decl {std::string tapeImageDirectory;} {}
  decl {std::string diskImageDirectory;} {}
  decl {std::string romImageDirectory;} {}
  decl {std::string prgFileDirectory;} {}
  decl {Ep128Emu::ConfigurationDB guiConfig;} {}
  decl {void init_();} {}
  decl {void updateDisplay(double t = 0.025);} {public
  }
  decl {void errorMessage(const char *msg);} {public
  }
  decl {void run();} {public
  }
  decl {void resizeWindow(int w, int h);} {}
  decl {int handleFLTKEvent(int event);} {public
  }
  decl {bool lockVMThread(size_t t = 2000);} {public
  }
  decl {void unlockVMThread();} {public
  }
  decl {bool setSingleThreadedMode(bool isEnabled);} {public
  }
  decl {bool browseFile(std::string& fileName, std::string& dirName, const char *pattern, int type, const char *title);} {public
  }
  decl {void applyEmulatorConfiguration();} {public
  }
  decl {static void errorMessageCallback(void *userData, const char *msg);} {public
  }
  decl {static void fileNameCallback(void *userData, std::string& fileName);} {public
  }
  decl {bool closeDemoFile(bool stopDemo_);} {public
  }
  decl {void updateDisplaySettingsWindow();} {public
  }
  decl {void updateSoundSettingsWindow();} {public
  }
  decl {static void menuCallback_File_SetFileIODir(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_File_LoadFile(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_File_LoadConfig(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_File_SaveConfig(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_File_QSFileName(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_File_QSLoad(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_File_QSSave(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_File_SaveSnapshot(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_File_RecordDemo(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_File_StopDemo(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_File_RecordSound(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_File_StopSndRecord(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_File_LoadPRG(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_File_SavePRG(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_File_Quit(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_Machine_Pause(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_Machine_FullSpeed(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_Machine_OpenTape(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_Machine_TapePlay(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_Machine_TapeStop(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_Machine_TapeRecord(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_Machine_TapeRewind(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_Machine_TapePrvCP(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_Machine_TapeBwd10s(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_Machine_TapeBwd60s(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_Machine_TapeNxtCP(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_Machine_TapeFwd10s(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_Machine_TapeFwd60s(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_Machine_AddCP(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_Machine_DeleteCP(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_Machine_DeleteCPs(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_Machine_TapeClose(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_Machine_Reset(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_Machine_ColdReset(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_Machine_ResetFreqs(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_Machine_ResetAll(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_Machine_Configure(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_Options_DpyMode(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_Options_DpySize1(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_Options_DpySize2(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_Options_DpySize3(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_Options_DpyConfig(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_Options_SndIncVol(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_Options_SndDecVol(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_Options_SndConfig(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_Options_FloppyCfg(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_Options_ThreadMode(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_Debug_OpenDebugger(Fl_Widget *o, void *v);} {}
  decl {static void menuCallback_Help_About(Fl_Widget *o, void *v);} {}
  Function {Ep128EmuGUI(Ep128Emu::VideoDisplay& display_, Ep128Emu::AudioOutput& audioOutput_, Ep128Emu::VirtualMachine& vm_, Ep128Emu::VMThread& vmThread_, Ep128Emu::EmulatorConfiguration& config_) : display(display_), audioOutput(audioOutput_), vm(vm_), vmThread(vmThread_), config(config_)} {open
  } {
    code {{
  this->init_();
}} {}
    Fl_Window mainWindow {
      label ep128emu open
      xywh {248 54 400 360} type Single color 37 selection_color 0 resizable size_range {384 348 1536 1182} visible
    } {
      Fl_Menu_Bar mainMenuBar {open
        xywh {0 0 340 30} box FLAT_BOX color 37 selection_color 236 labelcolor 52 textcolor 52
      } {}
      Fl_Group emulatorWindowGroup {open
        xywh {0 30 400 300} color 0
        code0 {o->add(emulatorWindow);}
        code1 {o->setGUI(this);}
        class EmulatorWindowGroup
      } {}
      Fl_Group statusDisplayGroup {open
        xywh {40 330 360 30} color 37
      } {
        Fl_Output demoStatusDisplay1 {
          xywh {50 335 50 20} box NO_BOX color 37 selection_color 236 labelsize 12 labelcolor 52 textsize 12 textcolor 52
          code0 {o->value("Demo: ");}
        }
        Fl_Output demoStatusDisplay2 {
          xywh {97 335 20 20} color 0 selection_color 236 labelsize 12 labelcolor 52 align 8 textfont 5 textsize 12 textcolor 247
        }
        Fl_Output tapeInfoDisplay {
          xywh {130 335 150 20} box NO_BOX color 37 selection_color 236 labelsize 12 labelcolor 52 textsize 12 textcolor 52
          code0 {o->value("Tape: none");}
        }
        Fl_Group tapeStatusDisplayGroup {open
          xywh {290 335 100 20} box DOWN_BOX color 0 labelsize 12 align 4
        } {
          Fl_Output tapeStatusDisplay {
            xywh {290 335 20 20} box NO_BOX color 0 selection_color 236 labelsize 12 align 8 textfont 5 textsize 12 textcolor 247
          }
          Fl_Output tapePositionDisplay {
            xywh {310 335 80 20} box NO_BOX color 0 selection_color 236 labelsize 12 textfont 4 textsize 12 textcolor 247
          }
        }
      }
    }
    Fl_Window errorMessageWindow {
      label {ep128emu error} open
      xywh {249 553 280 150} type Double color 37 selection_color 236 modal visible
    } {
      Fl_Box {} {
        xywh {10 10 260 95} box THIN_UP_BOX color 39 selection_color 236 labelcolor 54
      }
      Fl_Box errorMessageText {
        xywh {20 15 240 85} box FLAT_BOX color 39 selection_color 236 labelcolor 54 align 144
      }
      Fl_Button {} {
        label OK
        callback {errorMessageWindow->hide();}
        xywh {105 115 70 25} color 38 selection_color 39 labelcolor 52
      }
    }
    Fl_Window displaySettingsWindow {
      label {Display settings}
      callback {{
  try {
    applyEmulatorConfiguration();
  }
  catch (std::exception& e) {
    errorMessage(e.what());
  }
  updateDisplaySettingsWindow();
  displaySettingsWindow->hide();
  if ((displayMode & 1) == 0)
    emulatorWindow->cursor(FL_CURSOR_DEFAULT);
  else
    emulatorWindow->cursor(FL_CURSOR_NONE);
}} open
      xywh {224 231 400 450} type Double color 37 visible
    } {
      Fl_Group {} {open
        tooltip {Note: you can click on and drag the value displays for fine adjustment} xywh {10 10 380 235} box THIN_UP_BOX color 38
      } {
        Fl_Box {} {
          label Brightness
          xywh {20 75 75 20} color 38 labelcolor 52 align 20
        }
        Fl_Dial globalBrightnessValuator {
          label Global
          callback {{
  config.display.brightness = o->value();
  config.displaySettingsChanged = true;
  globalBrightnessValueDisplay->value(o->value());
}}
          xywh {115 35 35 35} color 46 selection_color 54 labelcolor 52 align 1 minimum -0.5 maximum 0.5
        }
        Fl_Value_Output globalBrightnessValueDisplay {
          callback {{
  config.display.brightness = o->value();
  config.displaySettingsChanged = true;
  globalBrightnessValuator->value(o->value());
}}
          xywh {110 75 45 20} color 0 selection_color 236 labelsize 13 labelcolor 52 minimum -0.5 maximum 0.5 textsize 13 textcolor 52
          code0 {o->precision(3);}
        }
        Fl_Dial redBrightnessValuator {
          label Red
          callback {{
  config.display.red.brightness = o->value();
  config.displaySettingsChanged = true;
  redBrightnessValueDisplay->value(o->value());
}}
          xywh {190 35 35 35} color 46 selection_color 54 labelcolor 52 align 1 minimum -0.5 maximum 0.5
        }
        Fl_Value_Output redBrightnessValueDisplay {
          callback {{
  config.display.red.brightness = o->value();
  config.displaySettingsChanged = true;
  redBrightnessValuator->value(o->value());
}}
          xywh {185 75 45 20} color 0 selection_color 236 labelsize 13 labelcolor 52 minimum -0.5 maximum 0.5 textsize 13 textcolor 52
          code0 {o->precision(3);}
        }
        Fl_Dial greenBrightnessValuator {
          label Green
          callback {{
  config.display.green.brightness = o->value();
  config.displaySettingsChanged = true;
  greenBrightnessValueDisplay->value(o->value());
}}
          xywh {265 35 35 35} color 46 selection_color 54 labelcolor 52 align 1 minimum -0.5 maximum 0.5
        }
        Fl_Value_Output greenBrightnessValueDisplay {
          callback {{
  config.display.green.brightness = o->value();
  config.displaySettingsChanged = true;
  greenBrightnessValuator->value(o->value());
}}
          xywh {260 75 45 20} color 0 selection_color 236 labelsize 13 labelcolor 52 minimum -0.5 maximum 0.5 textsize 13 textcolor 52
          code0 {o->precision(3);}
        }
        Fl_Dial blueBrightnessValuator {
          label Blue
          callback {{
  config.display.blue.brightness = o->value();
  config.displaySettingsChanged = true;
  blueBrightnessValueDisplay->value(o->value());
}}
          xywh {340 35 35 35} color 46 selection_color 54 labelcolor 52 align 1 minimum -0.5 maximum 0.5
        }
        Fl_Value_Output blueBrightnessValueDisplay {
          callback {{
  config.display.blue.brightness = o->value();
  config.displaySettingsChanged = true;
  blueBrightnessValuator->value(o->value());
}}
          xywh {335 75 45 20} color 0 selection_color 236 labelsize 13 labelcolor 52 minimum -0.5 maximum 0.5 textsize 13 textcolor 52
          code0 {o->precision(3);}
        }
        Fl_Box {} {
          label Contrast
          xywh {20 145 75 20} color 38 labelcolor 52 align 20
        }
        Fl_Dial globalContrastValuator {
          callback {{
  config.display.contrast = o->value();
  config.displaySettingsChanged = true;
  globalContrastValueDisplay->value(o->value());
}}
          xywh {115 105 35 35} color 46 selection_color 54 labelcolor 52 align 1 minimum 0.5 maximum 2 value 1
        }
        Fl_Value_Output globalContrastValueDisplay {
          callback {{
  config.display.contrast = o->value();
  config.displaySettingsChanged = true;
  globalContrastValuator->value(o->value());
}}
          xywh {110 145 45 20} color 0 selection_color 236 labelsize 13 labelcolor 52 minimum 0.5 maximum 2 value 1 textsize 13 textcolor 52
          code0 {o->precision(3);}
        }
        Fl_Dial redContrastValuator {
          callback {{
  config.display.red.contrast = o->value();
  config.displaySettingsChanged = true;
  redContrastValueDisplay->value(o->value());
}}
          xywh {190 105 35 35} color 46 selection_color 54 labelcolor 52 align 1 minimum 0.5 maximum 2 value 1
        }
        Fl_Value_Output redContrastValueDisplay {
          callback {{
  config.display.red.contrast = o->value();
  config.displaySettingsChanged = true;
  redContrastValuator->value(o->value());
}}
          xywh {185 145 45 20} color 0 selection_color 236 labelsize 13 labelcolor 52 minimum 0.5 maximum 2 value 1 textsize 13 textcolor 52
          code0 {o->precision(3);}
        }
        Fl_Dial greenContrastValuator {
          callback {{
  config.display.green.contrast = o->value();
  config.displaySettingsChanged = true;
  greenContrastValueDisplay->value(o->value());
}}
          xywh {265 105 35 35} color 46 selection_color 54 labelcolor 52 align 1 minimum 0.5 maximum 2 value 1
        }
        Fl_Value_Output greenContrastValueDisplay {
          callback {{
  config.display.green.contrast = o->value();
  config.displaySettingsChanged = true;
  greenContrastValuator->value(o->value());
}}
          xywh {260 145 45 20} color 0 selection_color 236 labelsize 13 labelcolor 52 minimum 0.5 maximum 2 value 1 textsize 13 textcolor 52
          code0 {o->precision(3);}
        }
        Fl_Dial blueContrastValuator {
          callback {{
  config.display.blue.contrast = o->value();
  config.displaySettingsChanged = true;
  blueContrastValueDisplay->value(o->value());
}}
          xywh {340 105 35 35} color 46 selection_color 54 labelcolor 52 align 1 minimum 0.5 maximum 2 value 1
        }
        Fl_Value_Output blueContrastValueDisplay {
          callback {{
  config.display.blue.contrast = o->value();
  config.displaySettingsChanged = true;
  blueContrastValuator->value(o->value());
}}
          xywh {335 145 45 20} color 0 selection_color 236 labelsize 13 labelcolor 52 minimum 0.5 maximum 2 value 1 textsize 13 textcolor 52
          code0 {o->precision(3);}
        }
        Fl_Box {} {
          label Gamma
          xywh {20 215 75 20} color 38 labelcolor 52 align 20
        }
        Fl_Dial globalGammaValuator {
          callback {{
  config.display.gamma = o->value();
  config.displaySettingsChanged = true;
  globalGammaValueDisplay->value(o->value());
}}
          xywh {115 175 35 35} color 46 selection_color 54 labelcolor 52 align 1 minimum 0.25 maximum 4 value 1
        }
        Fl_Value_Output globalGammaValueDisplay {
          callback {{
  config.display.gamma = o->value();
  config.displaySettingsChanged = true;
  globalGammaValuator->value(o->value());
}}
          xywh {110 215 45 20} color 0 selection_color 236 labelsize 13 labelcolor 52 minimum 0.25 maximum 4 value 1 textsize 13 textcolor 52
          code0 {o->precision(3);}
        }
        Fl_Dial redGammaValuator {
          callback {{
  config.display.red.gamma = o->value();
  config.displaySettingsChanged = true;
  redGammaValueDisplay->value(o->value());
}}
          xywh {190 175 35 35} color 46 selection_color 54 labelcolor 52 align 1 minimum 0.25 maximum 4 value 1
        }
        Fl_Value_Output redGammaValueDisplay {
          callback {{
  config.display.red.gamma = o->value();
  config.displaySettingsChanged = true;
  redGammaValuator->value(o->value());
}}
          xywh {185 215 45 20} color 0 selection_color 236 labelsize 13 labelcolor 52 minimum 0.25 maximum 4 value 1 textsize 13 textcolor 52
          code0 {o->precision(3);}
        }
        Fl_Dial greenGammaValuator {
          callback {{
  config.display.green.gamma = o->value();
  config.displaySettingsChanged = true;
  greenGammaValueDisplay->value(o->value());
}}
          xywh {265 175 35 35} color 46 selection_color 54 labelcolor 52 align 1 minimum 0.25 maximum 4 value 1
        }
        Fl_Value_Output greenGammaValueDisplay {
          callback {{
  config.display.green.gamma = o->value();
  config.displaySettingsChanged = true;
  greenGammaValuator->value(o->value());
}}
          xywh {260 215 45 20} color 0 selection_color 236 labelsize 13 labelcolor 52 minimum 0.25 maximum 4 value 1 textsize 13 textcolor 52
          code0 {o->precision(3);}
        }
        Fl_Dial blueGammaValuator {
          callback {{
  config.display.blue.gamma = o->value();
  config.displaySettingsChanged = true;
  blueGammaValueDisplay->value(o->value());
}}
          xywh {340 175 35 35} color 46 selection_color 54 labelcolor 52 align 1 minimum 0.25 maximum 4 value 1
        }
        Fl_Value_Output blueGammaValueDisplay {
          callback {{
  config.display.blue.gamma = o->value();
  config.displaySettingsChanged = true;
  blueGammaValuator->value(o->value());
}}
          xywh {335 215 45 20} color 0 selection_color 236 labelsize 13 labelcolor 52 minimum 0.25 maximum 4 value 1 textsize 13 textcolor 52
          code0 {o->precision(3);}
        }
        Fl_Box {} {
          xywh {10 10 90 50} box THIN_DOWN_BOX color 37 selection_color 37 labelcolor 52
        }
      }
      Fl_Group {} {open
        xywh {10 255 380 150} box THIN_UP_BOX color 38
      } {
        Fl_Light_Button enableDisplayValuator {
          label {Enable display}
          callback {{
  config.display.enabled = (o->value() != 0);
  config.displaySettingsChanged = true;
}}
          xywh {20 265 150 25} color 39 labelcolor 52
        }
        Fl_Light_Button displayDoubleBufferedValuator {
          label {Double buffered}
          callback {{
  config.display.doubleBuffered = (o->value() != 0);
  config.displaySettingsChanged = true;
}}
          tooltip {Using a double buffered display in OpenGL mode can reduce "tearing" and other artifacts, but also disables the motion blur effect.} xywh {20 300 150 25} color 39 labelcolor 52
        }
        Fl_Value_Slider displayQualityValuator {
          label Quality
          callback {{
  config.display.quality = int(o->value() + 0.5);
  config.displaySettingsChanged = true;
}}
          tooltip {This parameter is used only in OpenGL mode. Larger values increase the texture size and enable more effects at the expense of higher CPU usage} xywh {20 335 110 25} type {Horz Knob} color 36 selection_color 45 labelcolor 52 align 8 maximum 3 step 1 value 1 textcolor 52
        }
        Fl_Value_Input pixelAspectRatioValuator {
          label {Pixel aspect ratio}
          callback {{
  config.display.pixelAspectRatio = o->clamp(o->value());
  o->value(config.display.pixelAspectRatio);
  config.displaySettingsChanged = true;
}}
          tooltip {The assumed pixel aspect ratio of the screen; 1.0 means square pixels (the default), larger values make the display narrower, while smaller values result in a wider display. Type new value, or click and drag to change it.} xywh {20 370 55 25} color 0 selection_color 236 labelcolor 52 align 8 when 4 minimum 0.5 maximum 2 step 0.001 value 1 textcolor 52
        }
        Fl_Value_Slider displaySaturationValuator {
          label Saturation
          callback {{
  config.display.saturation = o->value();
  config.displaySettingsChanged = true;
}}
          xywh {200 265 110 25} type {Horz Knob} color 36 selection_color 45 labelcolor 52 align 8 maximum 2 value 1 textcolor 52
        }
        Fl_Value_Slider displayFXParam1Valuator {
          label {Effect 1}
          callback {{
  config.display.effects.param1 = o->value();
  config.displaySettingsChanged = true;
}}
          tooltip {Controls vertical filtering of scanlines when display quality is set to 3} xywh {200 300 110 25} type {Horz Knob} color 36 selection_color 45 labelcolor 52 align 8 maximum 0.5 value 0.25 textcolor 52
        }
        Fl_Value_Slider displayFXParam2Valuator {
          label {Effect 2}
          callback {{
  config.display.effects.param2 = o->value();
  config.displaySettingsChanged = true;
}}
          tooltip {Scale factor for new frame (used for motion blur effect in single buffered OpenGL mode)} xywh {200 335 110 25} type {Horz Knob} color 36 selection_color 45 labelcolor 52 align 8 value 0.75 textcolor 52
        }
        Fl_Value_Slider displayFXParam3Valuator {
          label {Effect 3}
          callback {{
  config.display.effects.param3 = o->value();
  config.displaySettingsChanged = true;
}}
          tooltip {Scale factor for previous frame (used for motion blur effect in single buffered OpenGL mode)} xywh {200 370 110 25} type {Horz Knob} color 36 selection_color 45 labelcolor 52 align 8 value 0.25 textcolor 52
        }
      }
      Fl_Button {} {
        label Apply
        callback {{
  try {
    applyEmulatorConfiguration();
  }
  catch (std::exception& e) {
    errorMessage(e.what());
  }
  updateDisplaySettingsWindow();
  if ((displayMode & 1) == 0)
    emulatorWindow->cursor(FL_CURSOR_DEFAULT);
  else
    emulatorWindow->cursor(FL_CURSOR_NONE);
}}
        xywh {255 415 60 25} color 38 selection_color 39 labelcolor 52
      }
      Fl_Button {} {
        label OK
        callback {{
  try {
    applyEmulatorConfiguration();
  }
  catch (std::exception& e) {
    errorMessage(e.what());
  }
  updateDisplaySettingsWindow();
  displaySettingsWindow->hide();
  if ((displayMode & 1) == 0)
    emulatorWindow->cursor(FL_CURSOR_DEFAULT);
  else
    emulatorWindow->cursor(FL_CURSOR_NONE);
}}
        xywh {325 415 60 25} color 38 selection_color 39 labelcolor 52
      }
    }
    Fl_Window soundSettingsWindow {
      label {Sound settings}
      callback {{
  try {
    applyEmulatorConfiguration();
  }
  catch (std::exception& e) {
    errorMessage(e.what());
  }
  updateSoundSettingsWindow();
  soundSettingsWindow->hide();
}} open
      xywh {730 361 400 450} type Double color 37 visible
    } {
      Fl_Group {} {open
        xywh {10 10 380 185} box THIN_UP_BOX color 38 labelcolor 52
      } {
        Fl_Choice soundDeviceValuator {
          callback {{
  if (o->value() >= 0) {
    config.sound.device = o->value() - 1;
    config.soundSettingsChanged = true;
  }
}} open
          xywh {20 20 235 25} down_box BORDER_BOX color 0 selection_color 236 labelcolor 3 align 8 textcolor 52
        } {}
        Fl_Box {} {
          label {Audio device}
          xywh {265 20 115 25} color 38 labelcolor 52 align 20
        }
        Fl_Light_Button enableSoundValuator {
          label {Enable sound output}
          callback {{
  config.sound.enabled = (o->value() != 0);
  config.soundSettingsChanged = true;
}}
          tooltip {Note: disabling sound output will also make the emulation run faster than real time} xywh {20 55 170 25} color 39 labelcolor 52
        }
        Fl_Light_Button soundHighQualityValuator {
          label {High quality}
          callback {{
  config.sound.highQuality = (o->value() != 0);
  config.soundSettingsChanged = true;
}}
          tooltip {Using high quality sample rate conversion reduces aliasing, but also increases CPU usage} xywh {20 90 170 25} color 39 labelcolor 52
        }
        Fl_Value_Input soundSampleRateValuator {
          label {Sample rate}
          callback {{
  config.sound.sampleRate = o->clamp(o->value());
  o->value(config.sound.sampleRate);
  config.soundSettingsChanged = true;
}}
          xywh {20 125 75 25} color 0 selection_color 236 labelcolor 52 align 8 when 4 minimum 11025 maximum 192000 step 1 value 48000 textcolor 52
        }
        Fl_Input soundOutputFileValuator {
          callback {{
  try {
    config.sound.file = o->value();
    Ep128Emu::stripString(config.sound.file);
  }
  catch (std::exception& e) {
    errorMessage(e.what());
  }
  config.soundSettingsChanged = true;
}}
          tooltip {Record sound output to this file in 16 bit WAV format; if left blank, no sound file is written} xywh {20 160 205 25} color 0 selection_color 236 labelcolor 52 textcolor 52
        }
        Fl_Button {} {
          label {...}
          callback {{
  try {
    std::string tmp;
    if (browseFile(tmp, soundFileDirectory,
                   "Sound files (*.wav)",
                   Fl_File_Chooser::CREATE,
                   "Select sound output file"))
      config["sound.file"] = tmp;
  }
  catch (std::exception& e) {
    errorMessage(e.what());
  }
}}
          xywh {230 160 25 25} color 39 selection_color 40 labelcolor 52
        }
        Fl_Box {} {
          label {Audio output file}
          xywh {265 160 115 25} color 38 labelcolor 52 align 20
        }
        Fl_Value_Slider soundLatencyValuator {
          label Latency
          callback {{
  config.sound.latency = o->value() / 1000.0;
  config.soundSettingsChanged = true;
}}
          tooltip {Audio output latency in milliseconds; smaller values improve the responsiveness of the emulator, but may cause the sound to skip} xywh {200 55 120 25} type {Horz Knob} color 36 selection_color 45 labelcolor 52 align 8 minimum 5 maximum 500 step 1 value 100 textcolor 52
        }
        Fl_Value_Output soundHWPeriodsValuator {
          label {Hardware buffers}
          callback {{
  config.sound.hwPeriods = int(o->value() + 0.5);
  config.soundSettingsChanged = true;
}}
          tooltip {Number of sound card buffers; click and drag to change the value} xywh {200 90 35 25} color 0 selection_color 236 labelcolor 52 align 8 minimum 2 maximum 16 step 1 value 4 textcolor 52
        }
        Fl_Value_Output soundSWPeriodsValuator {
          label {Software buffers}
          callback {{
  config.sound.swPeriods = int(o->value() + 0.5);
  config.soundSettingsChanged = true;
}}
          tooltip {Number of buffers in emulator ring buffer; click and drag to change the value} xywh {200 125 35 25} color 0 selection_color 236 labelcolor 52 align 8 minimum 2 maximum 16 step 1 value 4 textcolor 52
        }
      }
      Fl_Group {} {open
        xywh {10 205 380 200} box THIN_UP_BOX color 38 labelcolor 52
      } {}
      Fl_Button {} {
        label Apply
        callback {{
  try {
    applyEmulatorConfiguration();
  }
  catch (std::exception& e) {
    errorMessage(e.what());
  }
  updateSoundSettingsWindow();
}}
        xywh {255 415 60 25} color 38 selection_color 39 labelcolor 52
      }
      Fl_Button {} {
        label OK
        callback {{
  try {
    applyEmulatorConfiguration();
  }
  catch (std::exception& e) {
    errorMessage(e.what());
  }
  updateSoundSettingsWindow();
  soundSettingsWindow->hide();
}}
        xywh {325 415 60 25} color 38 selection_color 39 labelcolor 52
      }
    }
  }
  Function {~Ep128EmuGUI()} {open
  } {
    code {{
  setSingleThreadedMode(false);
  vmThread.quit(true);
  errorMessageWindow->hide();
  browseFileWindow->hide();
  displaySettingsWindow->hide();
  soundSettingsWindow->hide();
  mainWindow->hide();
  Fl::wait(0.0);
  emulatorWindowGroup->remove(*emulatorWindow);
  delete errorMessageWindow;
  delete browseFileWindow;
  delete displaySettingsWindow;
  delete soundSettingsWindow;
  delete mainWindow;
  config.sound.file = "";
}} {}
  }
} 
