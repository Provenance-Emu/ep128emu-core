ep128emu 2.0.0 beta2
====================

ep128emu is an open source, portable emulator of 8 bit computers,
including the Enterprise 128, and, starting from version 2.0.0, the
Commodore Plus/4, written in C++, and supporting Windows and POSIX
platforms (32 bit Windows, and 32 and 64 bit Linux have been tested).
It implements accurate, high quality hardware emulation, particularly
for the Plus/4, however, the system requirements are higher than that
of most other emulators.

Features
========

General
-------

  * graphical user interface using the FLTK library
  * software (FLTK based) or OpenGL video, with resizable emulator
    window, fullscreen mode, brightness/contrast/gamma can be set
    globally or separately for red/green/blue channels, color
    saturation control; additional features in OpenGL mode only: single
    or double buffered (with synchronization to vertical refresh) mode,
    linear texture filtering, and some display effects
  * real time audio output uses the PortAudio library (v18 or v19), with
    support for many native audio APIs (MME/DirectSound/ASIO on Windows,
    OSS/ALSA/JACK on Linux, and CoreAudio on MacOS X); high quality
    sample rate conversion with low aliasing; volume control, two first
    order highpass filters with configurable cutoff frequency, and an
    optional parametric equalizer can be applied to the audio signal
  * recording sound output to a WAV format sound file
  * saving and loading snapshots of the state of the emulated machine
  * demo recording (snapshot combined with stream of keyboard events
    which can be played back with accurate timing)
  * tape emulation for all supported machine types, with playback,
    recording, and setting tape position; markers can be created for
    quick positioning to specific tape locations (useful for tapes with
    multiple files); uses custom file format which is PCM audio data
    with 1 to 8 bits of sample resolution and variable sample rate, and
    header including the table of markers
  * GUI tape editor utility for copying Enterprise files from/to
    ep128emu tape images
  * command line utility for converting C16 .tap files to ep128emu
    format
  * simple GUI debugger with support for breakpoints/watchpoints,
    viewing the current state of CPU registers and memory paging,
    displaying memory dump or loading from or saving to a file in ASCII
    or binary format, modifying memory or searching for a pattern of
    bytes, disassembler with support for all undocumented 6502 and some
    Z80 opcodes, address offset for code that runs at a different
    location than where it is at the time of disassembling, and saving
    disassembly to a file. For memory operations and the disassembler,
    addresses can be 16 bit CPU (affected by current paging and includes
    memory mapped I/O registers) or 22 bit physical (all ROM and RAM
    data can be accessed, regardless of memory paging) addresses.
    In the case of Z80 emulation, watchpoints can also be set on I/O
    ports and physical addresses.

Enterprise emulation
--------------------

  * instruction based emulation of the Z80 CPU, supports all documented
    and some undocumented opcodes, and memory wait states (including
    synchronization with the NICK chip when accessing video memory)
  * RAM size can be set in 16 kilobyte steps in the range 64 to 3712
  * ROM can be loaded from external image files to segments 0 to 7,
    16 to 19 (decimal), 32 to 35, and 48 to 51
  * NICK chip emulation, supporting all documented video modes
  * DAVE emulation, including timers, interrupts, external ports for
    tape and keyboard/joystick, memory paging, and sound output (all
    effects are supported, and the polynomial counters generate the same
    pseudo-random "noise" pattern as on the real machine)
  * WD177x (floppy disk controller) emulation for EXDOS
  * optional extension ROM (epfileio.rom) that implements a FILE: device
    for direct access to files on the host system in a single user
    selectable directory

Plus/4 emulation
----------------

  * cycle based emulation of the 7501/8501 CPU, supporting all
    documented and undocumented opcodes, and fully compatible decimal
    mode
  * TED 7360/8360 emulation with high level of compatibility, implements
    all documented video modes, PAL/NTSC mode switching, as well as most
    known display artifacts; all registers can be read and written, and
    the internal operation and timing is reproduced with good accuracy
  * RAM size can be 16, 32, 64, 256, or 1024 kilobytes (the latter two
    using the Hannes memory expansion)
  * up to 8 16 kilobyte banks of ROM can be loaded from external image
    files
  * SID emulation using version 0.16 of the reSID library by Dag Lem,
    implements the MOS 8580 chip running at single clock speed (886.7
    kHz in PAL mode) with registers appearing at FD40-FD5F and FE80-FE9F
  * experimental hardware level emulation of the 1541 and 1581 floppy
    disk drives, with support for D64 and D81 files
  * load and automatically start .PRG file on start-up
  * optional extension ROM (p4fileio.rom) for direct access to .PRG
    files by the load/save commands on the host system in a single user
    selectable directory

Installation
============

Linux
-----

On Linux and other POSIX platforms, the emulator is installed from the
source code, available at the SourceForge download page
  http://sourceforge.net/project/showfiles.php?group_id=128766
or the most recent state of the code can be downloaded from CVS with the
following command:
  cvs -z3 -d                                                        \
  :pserver:anonymous@ep128emu.cvs.sourceforge.net:/cvsroot/ep128emu \
  checkout -P ep128emu2
In addition to the standard development tools (a recent version of the
GNU C/C++ compiler, binutils, etc.), you need the following packages:

  * SCons (http://www.scons.org/)
  * Python interpreter for running SCons
  * FLTK 1.1.x (http://www.fltk.org/software.php?VERSION=1.1.7)
    NOTE: this library should be compiled with the --enable-threads
    'configure' option - many Linux distributions include binaries of
    the FLTK library built without --enable-threads, so you may need to
    compile it from sources
  * PortAudio (http://www.portaudio.com/download.html), version 18 and
    19 are supported, but v19 is recommended
  * libsndfile (http://www.mega-nerd.com/libsndfile/#Download)
  * dotconf (http://www.azzit.de/dotconf/)

Once these are installed, you can edit the file 'SConstruct' in the top
level source directory for setting compiler flags etc., and run the
command 'scons' for building the emulator. The resulting executable
files (ep128emu, tapconv, and tapeedit) can be copied to any directory
that is in the PATH, but when installing the first time, you also need
to set up configuration files and ROM images:

  * create the directories ~/.ep128emu, ~/.ep128emu/config, and
    ~/.ep128emu/roms, and optionally ~/.ep128emu/demo, ~/.ep128emu/disk,
    ~/.ep128emu/progs, and ~/.ep128emu/tape
  * copy the files 'roms/epfileio.rom' and 'roms/p4fileio.rom' from the
    sources to ~/.ep128emu/roms
  * download http://www.sharemation.com/IstvanV/roms/ep128emu_roms.zip,
    and extract it to ~/.ep128emu/roms
  * run './makecfg ~/.ep128emu' to create the initial configuration
    files

Windows
-------

A binary package with an installer is available at the SourceForge
download page:
  http://sourceforge.net/project/showfiles.php?group_id=128766
To install, just run the executable, and follow the instructions.
The installer can automatically download the ROM images needed for
running the emulator, but these can also be installed manually by
downloading http://www.sharemation.com/IstvanV/roms/ep128emu_roms.zip,
and extracting it to roms\ under the selected installation folder.
When asked if configuration files should be reinstalled, click 'OK' when
installing the first time, but this step can be skipped in later
installations to preserve the configuration.

Usage
=====

Command line options
--------------------

  -h
  -help
  --help
    print the list of available command line options
  -ep128
    emulate an Enterprise (this is the default)
  -plus4
    emulate a Commodore Plus/4
  -cfg <FILENAME>
    load an ASCII format configuration file on startup, and apply
    settings
  -prg <FILENAME>
    load and run program file on startup (Plus/4 only)
  -opengl
    use OpenGL video driver (this is the default, and is recommended
    when hardware accelerated OpenGL is available)
  -no-opengl
    use software video driver; this is slower than OpenGL when used at
    high resolutions, and also disables many display effects, but should
    work on all machines; however, it will use a color depth of 24 bits,
    while in OpenGL mode the textures are 16 bit (R5G6B5) only, to
    improve performance
  OPTION=VALUE
    set configuration variable 'OPTION' to 'VALUE'; the available
    variable names are the same as those used in ASCII format
    configuration files
  OPTION
    set boolean configuration variable 'OPTION' to true

'File' menu
-----------

Set working directory

  Set the directory to be accessed by the optional file I/O ROM
  extension modules.

Load file

  Load an ep128emu format binary file, which may be a previously saved
  snapshot or demo for the same machine type as the one currently being
  emulated, a binary format configuration file, or a Plus/4 program file
  with ep128emu header.

Load configuration file

  Select and load an ASCII format configuration file and apply the new
  settings. If the configuration file does not include all the supported
  options, those that are omitted are left unchanged.

Save configuration file

  Save the current emulator configuration to an ASCII text file, which
  can be edited with any text editor, and can be loaded at a later time.

Quick snapshot / Set file name

  Select file name for quick snapshots. The default is
  ~/.ep128emu/qs_ep128.dat or ~/.ep128emu/qs_plus4.dat, depending on the
  machine type. This setting is not saved on exit.

Quick snapshot / Load (Ctrl + F10)

  Load the quick snapshot file if it exists.

Quick snapshot / Save (Ctrl + F9)

  Save a snapshot of the current state of the emulated machine to the
  quick snapshot file. The snapshot will also include the current memory
  configuration and ROM images, but clock frequency and timing settings
  are not restored when loading a snapshot. The file format may be
  subject to changes between different releases of the emulator. Note
  that the state of any floppy drives is currently not saved, and the
  drives are reset on loading a snapshot.

Save snapshot

  Save snapshot to the selected file (see notes above).

Record demo

  Save snapshot (including clock frequency and timing settings) and
  record keyboard events to the selected file until the recording is
  stopped. The events can be replayed with accurate timing when the
  file is loaded later. Note that the file format may change between
  different releases of the emulator. Events that

Stop demo (Ctrl + F12)

  Stop any currently running demo playback or recording.

Record sound file

  Write 16 bit signed PCM sound output to a WAV format sound file.

Stop sound recording

  Close sound output file if it is currently being written.

Quit

  Exit the emulator.

'Machine' menu
--------------

Reset / Reset (F11)

  This has the same effect as using the reset button on the real
  machine.

Reset / Force reset (Ctrl + F11)

  In addition to a normal reset, make sure that the emulated machine is
  really restarted using the standard ROM reset routines, and do not
  allow programs to disable reset by setting custom (RAM) handlers.
  In the case of Plus/4 emulation, most of the RAM data is still
  preserved.
  This option will also turn off automatically enabled extensions that
  increase CPU usage, such as SID emulation, or 1541/1581 drives with no
  disk opened.

Reset / Reset clock frequencies

  Reset clock frequency and timing settings to those specified in the
  machine configuration; this is normally only useful after demo
  playback, which may override the settings.

Reset / Reset machine configuration (Shift + F11)

  Reset memory configuration (RAM size, ROM images), clock frequency,
  and timing settings according to the machine configuration, and clear
  all RAM data. Implies 'Force reset' and 'Reset clock frequencies'.
  Reverting the configuration can be useful after snapshot loading or
  demo playback, as these may change the settings.

Enable SID emulation (Plus/4 only)

  Turn on SID emulation, making the SID registers appear at FD40-FD5F
  and FE80-FE9F; this increases the CPU usage of the emulator.
  SID emulation is also automatically enabled when a byte is written to
  the above mentioned address ranges, but some programs detect if a SID
  card is present by only reading the registers, and in those cases
  using this option is needed. SID emulation remains active until the
  next use of 'Force reset' or 'Reset machine configuration', and
  snapshot data includes SID state and whether it was enabled or not at
  the time of saving the snapshot.

'Options' menu
--------------

Display / Cycle display mode (F9)

  Cycle between these four display modes:
    window with no menu bar
    window with menu bar (this is the default)
    fullscreen with menu bar
    fullscreen with no menu bar

Display / Set size to 384x288
Display / Set size to 768x576
Display / Set size to 1152x864

  Resize the emulator window to predefined width/height values; this has
  no effect in fullscreen mode. While the window can also be resized
  using the window manager, sizes that are integer multiples of the
  actual screen resolution of the emulated machine may look better,
  particularly when texture filtering is not used.

Sound / Increase volume

  Increase sound output volume by about 1.5 dB.

Sound / Decrease volume

  Decrease sound output volume by about 1.5 dB.

Floppy / Configure...

  Opens a dialog for setting up floppy emulation. For each drive (in the
  case of Plus/4 emulation, A: is unit 8, B: is unit 9, C: is unit 10,
  and D: is unit 11), an image file can be selected, and disk geometry
  parameters can be specified. If the file name is left empty, that
  means having no disk in that particular drive. It may also be possible
  to directly access a real disk by using the /dev/fd* devices
  (on Linux) or \\.\A: (on Windows) as the image file.
  The geometry parameters are used only when emulating an Enterprise; at
  most one of these can be zero or negative to have the value calculated
  automatically from the other two and the file size.
  For the Plus/4, the image file must be either a D64 or a D81; the type
  is determined from the file size, and the geometry parameters are
  ignored. Opening a D64 file will enable 1541 emulation for that
  particular drive, while the 1581 will be emulated for D81 files. Since
  these drives are emulated at the hardware level (with a 6502 CPU,
  etc.), enabling them increases the CPU usage. A drive will remain
  active until a different type of image file is opened, or a snapshot
  is loaded or 'Force reset' (or anything that implies it) is used while
  there is no disk opened.

Floppy / Remove disk A
Floppy / Remove disk B
Floppy / Remove disk C
Floppy / Remove disk D

  These are just shortcuts for setting the image file name for a
  specific floppy drive to an empty string.

Copyright
=========

ep128emu is copyright (C) 2003-2007 by Istvan Varga
<istvanv@users.sourceforge.net>. Z80 emulation copyright (C) 1999-2003
by Kevin Thacker and Vincze Béla György. reSID 0.16 copyright (C) 2004
by Dag Lem.

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2 of the License, or (at your
option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

Credits
-------

Thanks to Hársfalvi Levente for testing the Plus/4 emulator and
providing some hardware information.

