ep128emu 2.0.5
==============

ep128emu is an open source, portable emulator of the Enterprise 128
computer, written in C++, and supporting Windows and POSIX platforms
(32 bit Windows, and 32 and 64 bit Linux have been tested; compiling and
running on MacOS X may be possible, but was not tested yet).
It implements accurate, high quality hardware emulation, however, the
system requirements are higher than that of most other emulators.

Features
========

General
-------

  * graphical user interface using the FLTK library
  * software (FLTK based) or OpenGL video, with resizable emulator
    window, fullscreen mode, brightness/contrast/gamma can be set
    globally or separately for red/green/blue channels, color
    saturation control; additional features in OpenGL mode only: single
    or double buffered (with synchronization to vertical refresh) mode,
    linear texture filtering, and some display effects
  * real time audio output uses the PortAudio library (v18 or v19), with
    support for many native audio APIs (MME/DirectSound/ASIO on Windows,
    OSS/ALSA/JACK on Linux, and CoreAudio on MacOS X); high quality
    sample rate conversion with low aliasing; volume control, two first
    order highpass filters with configurable cutoff frequency, and an
    optional parametric equalizer can be applied to the audio signal
  * recording audio output to a WAV format sound file
  * recording video and sound output to an AVI format video file, with
    768x576 RLE8 or 384x288 uncompressed YV12 video at 24 to 60 frames
    per second, and 48000 Hz stereo 16-bit PCM audio
  * saving screenshots as 768x576 8-bit RLE compressed TGA files
  * saving and loading snapshots of the state of the emulated machine
  * demo recording (snapshot combined with stream of keyboard events
    which can be played back with accurate timing)
  * GUI tape editor utility for copying Enterprise files from/to
    ep128emu tape images
  * GUI debugger with support for breakpoints/watchpoints, viewing the
    current state of CPU registers and memory paging, displaying memory
    dump and searching for a pattern of bytes, and disassembler with
    support for all documented and some undocumented Z80 opcodes.
    A simple monitor is also included, with commands like assemble,
    disassemble (also to file), trace, memory and I/O port dump and
    modify, printing and changing CPU registers, memory compare, copy,
    fill, search, load and save, and more.
    For most operations, addresses can be 16 bit CPU (affected by
    current paging) or 22 bit physical (all ROM and RAM data can be
    accessed, regardless of memory paging) addresses. Watchpoints can
    also be set on I/O ports and physical addresses.
    The debugger supports scripting in the Lua language, to allow for
    advanced uses like breakpoints with custom defined, complex set of
    conditions.
  * configurable keyboard map for the emulated machine; it is also
    possible to use external game controller devices like joysticks and
    gamepads

Enterprise emulation
--------------------

  * instruction based emulation of the Z80 CPU, supports all documented
    and some undocumented opcodes, and memory wait states (including
    synchronization with the NICK chip when accessing video memory)
  * RAM size can be set in 16 kilobyte steps in the range 64 to 3712
  * ROM can be loaded from external image files to segments 0 to 7,
    16 to 19 (decimal), 32 to 35, and 48 to 51
  * NICK chip emulation, supporting all documented video modes
  * DAVE emulation, including timers, interrupts, external ports for
    tape and keyboard/joystick, memory paging, and sound output (all
    effects are supported, and the polynomial counters generate the same
    pseudo-random "noise" pattern as on the real machine)
  * tape emulation with playback, recording, and setting tape position;
    markers can be created for quick positioning to specific tape
    locations (useful for tapes with multiple files); uses custom file
    format which is PCM audio data with 1 to 8 bits of sample resolution
    and variable sample rate, and header including the table of markers;
    there is also limited (read only) support for EPTE format tape
    files, as well as read-write (although without markers) support for
    sound files like WAV, AIFF, etc.
  * WD177x (floppy disk controller) emulation for EXDOS
  * optional extension ROM (epfileio.rom) that implements a FILE: device
    for direct access to files on the host system in a single user
    selectable directory
  * Spectrum emulator card emulation
  * real time clock (at ports 7E, 7F)

Installation
============

Linux
-----

On Linux and other POSIX platforms, the emulator is installed from the
source code, available at the SourceForge download page
  http://sourceforge.net/project/showfiles.php?group_id=128766
or the most recent state of the code can be downloaded from CVS with the
following command:
  cvs -z3 -d                                                        \
  :pserver:anonymous@ep128emu.cvs.sourceforge.net:/cvsroot/ep128emu \
  checkout -P ep128emu2
In addition to the standard development tools (a recent version of the
GNU C/C++ compiler, binutils, etc.), you need the following packages:

  * SCons (http://www.scons.org/)
  * Python interpreter for running SCons
  * FLTK 1.1.x (http://www.fltk.org/software.php?VERSION=1.1.7)
    NOTES:
      * this library should be compiled with the --enable-threads
        'configure' option - many Linux distributions include binaries
        of the FLTK library built without --enable-threads, so you may
        need to compile it from sources
      * on MacOS X, FLTK 1.1.7 needs to be patched with the included
        fltk-1.1.7-MacOSX.patch file
  * PortAudio (http://www.portaudio.com/download.html), version 18 and
    19 are supported, but v19 is recommended
  * libsndfile (http://www.mega-nerd.com/libsndfile/#Download)
  * dotconf (http://www.azzit.de/dotconf/) (optional, but recommended as
    it is used for reading ASCII format configuration files)
  * SDL (http://www.libsdl.org/) 1.2 for joystick input (optional);
    NOTE: on Linux, version 1.2.10 and newer do not work, so using 1.2.9
    is recommended
  * Lua (http://www.lua.org/) for scripting in the debugger (optional)

Once these are installed, you can edit the file 'SConstruct' in the top
level source directory for setting compiler flags etc., and run the
command 'scons' for building the emulator. The resulting executable
files (ep128emu and tapeedit) can be copied to any directory that is in
the PATH; on MacOS X, an .app package is created in 'ep128emu.app'.
When installing the first time, you also need to set up configuration
files and ROM images:

  * download
    http://ep128emu.enterpriseforever.org/roms/ep128emu_roms.zip,
    and extract it to ~/.ep128emu/roms (or, in the case of MacOS X,
    ~/Library/Application Support/ep128emu/roms)
  * after installing the ROM images, run 'ep128emu', and click OK to the
    windows that pop up asking for the base directory of configuration
    and data files, and if configuration files should be installed

It is possible to reinstall configuration files later by running the
'makecfg' utility.

Windows
-------

A binary package with an installer is available at the SourceForge
download page:
  http://sourceforge.net/project/showfiles.php?group_id=128766
To install, just run the executable, and follow the instructions.
The installer can automatically download the ROM images needed for
running the emulator, but these can also be installed manually by
downloading
http://ep128emu.enterpriseforever.org/roms/ep128emu_roms.zip, and
extracting it to roms\ under the selected installation folder.
When asked if configuration files should be reinstalled, click 'OK'
when installing the first time, but this step can be skipped in later
installations to preserve the configuration.

Usage
=====

Command line options
--------------------

  -h
  -help
  --help
    print the list of available command line options
  -cfg <FILENAME>
    load an ASCII format configuration file on startup, and apply
    settings
  -snapshot <FILENAME>
    load snapshot or demo file on startup
  -opengl
    use OpenGL video driver (this is the default, and is recommended
    when hardware accelerated OpenGL is available)
  -no-opengl
    use software video driver; this is slower than OpenGL when used at
    high resolutions, and also disables many display effects, but should
    work on all machines; however, it will use a color depth of 24 bits,
    while in OpenGL mode the textures are 16 bit (R5G6B5) only, to
    improve performance
  -colorscheme <N>
    select GUI color scheme N (0, 1, or 2)
  OPTION=VALUE
    set configuration variable 'OPTION' to 'VALUE'; the available
    variable names are the same as those used in ASCII format
    configuration files
  OPTION
    set boolean configuration variable 'OPTION' to true

'File' menu
-----------

Configuration / Load from ASCII file

  Select and load an ASCII format configuration file and apply the new
  settings. If the configuration file does not include all the supported
  options, those that are omitted are left unchanged.

Configuration / Load from binary file

  Load an ep128emu format binary file, which may be a previously saved
  snapshot, demo, or a binary format configuration file.

Configuration / Save as ASCII file

  Save the current emulator configuration to an ASCII text file, which
  can be edited with any text editor, and can be loaded at a later time.

Configuration / Save

  Save the current emulator configuration in binary format to the
  default file (~/.ep128emu/ep128cfg.dat). This is also automatically
  done when exiting the emulator.

Configuration / Revert

  Reload emulator configuration from ~/.ep128emu/ep128cfg.dat, and apply
  the original settings.

Save snapshot

  Save a snapshot of the current state of the emulated machine to the
  selected file. The snapshot will also include the current memory
  configuration and ROM images, but clock frequency and timing settings
  are not restored when loading a snapshot. The file format may be
  subject to changes between different releases of the emulator. Note
  that the state of any floppy drives is currently not saved, and the
  drives are reset on loading a snapshot.

Load snapshot

  Load an ep128emu format binary file, which may be a previously saved
  snapshot, demo, or a binary format configuration file.

Quick snapshot / Set file name

  Select file name for quick snapshots. The default is
  ~/.ep128emu/qs_ep128.dat. This setting is not saved on exit.

Quick snapshot / Save (Ctrl + F9)

  Save snapshot to the quick snapshot file (see notes above).

Quick snapshot / Load (Ctrl + F10)

  Load the quick snapshot file if it exists.

Record demo

  Save snapshot (including clock frequency and timing settings) and
  record keyboard events to the selected file until the recording is
  stopped. The events can be replayed with accurate timing when the
  file is loaded later. Note that the file format may change between
  different releases of the emulator, and the timing may also be
  incorrect when using a different version to play a demo file.

Stop demo (Ctrl + F12)

  Stop any currently running demo playback or recording.

Load demo

  Load an ep128emu format binary file, which may be a previously saved
  snapshot, demo, or a binary format configuration file.

Record audio / Start...

  Write 16 bit signed PCM sound output to a WAV format sound file.

Record audio / Stop

  Close sound output file if it is currently being written.

Record video / Start...

  Open new AVI file for video recording. This increases the CPU usage
  significantly, and since the data is written without compression, it
  will take up a lot of disk space. If the size of the output file
  reaches 2 GB, it is automatically closed, and the emulator asks for
  a new file to continue the recording.
  NOTE: the video and audio streams in the AVI file are not affected by
  any of the display or sound configuration settings.

Record video / Stop

  Stop video capture, and close any AVI file that is currently being
  written.

Save screenshot

  Save a screenshot in 8 bit RLE compressed TGA format. The video output
  is captured immediately after activating this menu item, and is saved
  at a resolution of 768x576 without any processing (color correction,
  effects, etc.).

Quit

  Exit the emulator.

'Machine' menu
--------------

Reset / Reset (F11)

  This has the same effect as using the reset button on the real
  machine.

Reset / Force reset (Ctrl + F11)

  In addition to a normal reset, make sure that the emulated machine is
  really restarted using the standard ROM reset routines, and do not
  allow programs to disable reset by setting custom (RAM) handlers.

Reset / Reset clock frequencies

  Reset clock frequency and timing settings to those specified in the
  machine configuration; this is normally only useful after demo
  playback, which may override the settings.

Reset / Reset machine configuration (Shift + F11)

  Reset memory configuration (RAM size, ROM images), clock frequency,
  and timing settings according to the machine configuration, and clear
  all RAM data. Implies 'Force reset' and 'Reset clock frequencies'.
  Reverting the configuration can be useful after snapshot loading or
  demo playback, as these may change the settings.

Quick configuration / Load config 1 (PageDown)

  Load the configuration file ~/.ep128emu/epvmcfg1.cfg, and apply the
  new settings.

Quick configuration / Load config 2 (PageUp)

  Load the configuration file ~/.ep128emu/epvmcfg2.cfg, and apply the
  new settings.

Quick configuration / Save config 1

  Save the current clock frequency and timing settings to
  ~/.ep128emu/epvmcfg1.cfg.

Quick configuration / Save config 2

  Save the current clock frequency and timing settings to
  ~/.ep128emu/epvmcfg2.cfg.

'Options' menu
--------------

Display / Set size to 384x288
Display / Set size to 768x576
Display / Set size to 1152x864

  Resize the emulator window to predefined width/height values; this has
  no effect in fullscreen mode. While the window can also be resized
  using the window manager, sizes that are integer multiples of the
  actual screen resolution of the emulated machine may look better,
  particularly when texture filtering is not used, and are also slightly
  faster when using the software video driver.

Display / Cycle display mode (F9)

  Cycle between these four display modes:
    window with no menu bar
    window with menu bar (this is the default)
    fullscreen with menu bar
    fullscreen with no menu bar

Sound / Increase volume

  Increase sound output volume by about 2 dB.

Sound / Decrease volume

  Decrease sound output volume by about 2 dB.

Floppy / Configure...

  Opens a dialog for setting up floppy emulation. For each drive, an
  image file can be selected, and disk geometry parameters can be
  specified. If the file name is left empty, that means having no disk
  in that particular drive. It may also be possible to directly access a
  real disk by using the /dev/fd* devices (on Linux) or \\.\A: (on
  Windows) as the image file.
  Any of the geometry parameters can be zero or negative to have the
  value calculated automatically from the others (if available), the
  image file size, and the file system header.

Floppy / Remove disk / Drive A
Floppy / Remove disk / Drive B
Floppy / Remove disk / Drive C
Floppy / Remove disk / Drive D
Floppy / Remove disk / All drives

  These are just shortcuts for setting the image file name for a
  specific floppy drive to an empty string.

Floppy / Replace disk / Drive A
Floppy / Replace disk / Drive B
Floppy / Replace disk / Drive C
Floppy / Replace disk / Drive D
Floppy / Replace disk / All drives

  Set the image file name for a specific (or all) floppy drive to an
  empty string, and then set the original file name again. This is
  mostly useful when accessing real floppy disks, after the disk is
  changed.

Set working directory

  Set the directory to be accessed by the optional file I/O ROM
  extension modules.

Lua scripting
-------------

Starting from version 2.0.5, it is possible to run scripts written in
Lua from the debugger. This document only describes the use of scripts
in the emulator, and the new API functions added; for general
information about programming in Lua, see http://www.lua.org/docs.html

Clicking the 'Run' button will run the script, and also enable the
breakpoint callback function (see below) if it is defined. If there are
any syntax or runtime errors, the script is terminated, and the
breakpoint callback is disabled. After making any changes to the script,
you need to click 'Run' and restart the script for the changes to take
effect.

It is possible to define a breakpoint callback function in the script,
which will be automatically called whenever a breakpoint is triggered,
and the debugger window would be shown. This function has the following
syntax:

  function breakPointCallback(bpType, addr, value)
    ...
    return showWindow
  end

where 'showWindow' is a boolean value, which, if true, will allow the
debugger window to be shown like normal, or have the emulated program
continue without any break if it is false. The four parameters passed to
the function are as follows:

  bpType

    The type of break, one of the following:
      0: breakpoint at opcode read by the CPU
      1: data read from memory
      2: data written to memory
      3: opcode read in single step mode; this happens when 'Step' or
         'Step over' are being used, and if the breakpoint callback
         function returns false, breaks will continue to occur until
         true is returned
      5: I/O port read
      6: I/O port write

  addr

    This is the 16 bit address where the break occured.

  value

    The value or CPU opcode read from or written to memory or I/O port.

The breakpoint callback function will remain active until either a new
script is run which does not define one, or the 'Stop' button is
clicked.

NOTE: an infinite loop in the script will hang the emulator, and a very
frequently called and/or complex breakpoint callback may slow down the
emulation.

The following new functions are defined by the emulator for use in the
scripts:

  AND(...)    OR(...)    XOR(...)    SHL(a, b)    SHR(a, b)

    These simple helper functions implement bitwise operations that are
    not available in the Lua language by default.
    AND, OR, and XOR can take any number of integer arguments, and
    return the bitwise AND, OR, and XOR of the values, respectively. In
    the case of zero arguments, OR and XOR return zero, while AND
    returns -1.
    SHL returns 'a' shifted to the left by 'b' bits, and SHR returns 'a'
    shifted to the right by 'b' bits. If 'b' is zero, the value is not
    changed, while a negative 'b' will reverse the direction of
    shifting. The result of shifting negative values to the right is
    unspecified.

  setBreakPoint(bptype, addr, priority)

    Set a breakpoint or watchpoint at address 'addr' (0-0xFFFF), with
    priority 'priority' (0 to 3). 'bptype' can be one of the following
    values:

      0: memory read or write
      1: memory read
      2: memory write
      3: memory read or write (same as bptype == 0)
      5: I/O port read
      6: I/O port write
      7: I/O port read or write

    For memory breakpoints, it is possible to add 8 to 'bpType' to
    interpret the address as a 22 bit value in the range 0 to 0x3FFFFF,
    with the segment number determined by the most significant 8 bits.
    If the address is greater than 0xFFFF, it is also automatically
    assumed to be in 22 bit format.
    An "ignore" breakpoint can be defined by adding 16 to 'bpType', this
    will disable other breakpoints when the program counter is at the
    address to be ignored; in this case, the priority parameter is not
    used.

    NOTE: the changes made to the breakpoint list by the script are not
    reflected in the breakpoint editor. To restore the previously
    defined breakpoints, click the 'Apply' button.

  clearBreakPoints()

    Deletes all previously defined breakpoints.

  getMemoryPage(n)

    Returns the segment selected for page 'n' (0 to 3).

  readMemory(addr)

    Read a byte from 'addr' (0 to 0xFFFF) in the address space of the
    CPU.

  writeMemory(addr, value)

    Write 'value' to 'addr' (0 to 0xFFFF) in the address space of the
    CPU.

  readMemoryRaw(addr)

    Read a byte from 'addr' (0 to 0x3FFFFF) in the "physical" address
    space; the most significant 8 bits of 'addr' select the segment
    number.

  writeMemoryRaw(addr, value)

    Write 'value' to 'addr' (0 to 0x3FFFFF) in the "physical" address
    space; the most significant 8 bits of 'addr' select the segment
    number.

  readIOPort(addr)

    Read a byte from I/O port 'addr' (0 to 0xFF).

  writeIOPort(addr, value)

    Write 'value' to I/O port 'addr' (0 to 0xFF).

  getPC()    getA()     getF()     getAF()    getB()     getC()
  getBC()    getD()     getE()     getDE()    getH()     getL()
  getHL()    getSP()    getIX()    getIY()    getAF_()   getBC_()
  getDE_()   getHL_()   getIM()    getI()     getR()

    These functions return the registers of the CPU.

  setPC(n)   setA(n)    setF(n)    setAF(n)   setB(n)    setC(n)
  setBC(n)   setD(n)    setE(n)    setDE(n)   setH(n)    setL(n)
  setHL(n)   setSP(n)   setIX(n)   setIY(n)   setAF_(n)  setBC_(n)
  setDE_(n)  setHL_(n)  setIM(n)   setI(n)    setR(n)

    Set CPU registers. Note that changing the program counter only takes
    effect after the execution of one instruction is completed.

  getNextOpcodeAddr(addr[, cpuAddressMode])

    Returns the address of the next Z80 instruction after the
    instruction at 'addr'. 'cpuAddressMode' selects the use of 16 bit
    CPU (if true or not specified) or 22 bit physical (if false)
    addresses.

  loadMemory(fname, asciiMode, cpuAddressMode, startAddr[, endAddr])

    Loads a file to the memory area at 'startAddr' to 'endAddr' (the
    byte at 'endAddr' is still loaded). If no end address is specified,
    all data is read into memory. The file is searched in the working
    directory set for file I/O, and if the name is an empty string, a
    file selection dialog is shown. The expected file format is binary
    if 'asciiMode' is false, and hexadecimal dump (as written by
    saveMemory() or the 'S' monitor command) if 'asciiMode' is true.
    'cpuAddressMode' selects the use of 16 bit CPU (if true) or 22 bit
    physical (if false) addresses.
    The return value is the number of bytes actually read.

  saveMemory(fname, asciiMode, cpuAddressMode, startAddr, endAddr)

    Save the memory area at 'startAddr' to 'endAddr' (the byte at
    'endAddr' is still written) to a file, in binary (if 'asciiMode' is
    false) or hexadecimal dump (if 'asciiMode' is true) format.
    'cpuAddressMode' selects the use of 16 bit CPU (if true) or 22 bit
    physical (if false) addresses.

  mprint(...)

    Prints any number of strings or numbers to the monitor.
    No separator characters are inserted between the arguments being
    printed, and a newline character is automatically added at the end
    of the message.

Example:

  mprint("Running Lua script example...")
  clearBreakPoints()
  setBreakPoint(1, 0x0040, 2)   -- break on reading memory at 0x0040
  function breakPointCallback(t, a, v)
    if t == 3 then              -- allow stepping
      return true
    end
    -- check for EXOS 1 call with A=102
    if getPC() ~= 0x0040 or getA() ~= 1 or readMemory(0x005A) ~= 102 then
      return false
    end
    -- read name parameter from memory
    s = ""
    n = readMemory(getDE())
    for i = 1, n do
      s = s..string.char(readMemory(getDE() + i))
    end
    mprint("Channel #102 is opened with name '", s, "'")
    return true
  end
  mprint("done.")

This will break when channel 102 is opened, and print the name parameter
passed to the EXOS call.

------------------------------------------------------------------------

Copyright
=========

ep128emu is copyright (C) 2003-2007 by Istvan Varga
<istvanv@users.sourceforge.net>. Z80 emulation copyright (C) 1999-2003
by Kevin Thacker and Vincze Béla György.

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2 of the License, or (at your
option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

